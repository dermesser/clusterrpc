// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/rpc.proto

package proto

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RPCResponse_Status int32

const (
	// Default value
	RPCResponse_STATUS_UNKNOWN RPCResponse_Status = 0
	// a.k.a. 200
	RPCResponse_STATUS_OK RPCResponse_Status = 1
	// service/endpoint not found (a.k.a. 404)
	RPCResponse_STATUS_NOT_FOUND RPCResponse_Status = 2
	// The handler returned an error; see the error_message for a description (500). response_data may have content
	RPCResponse_STATUS_NOT_OK RPCResponse_Status = 4
	// An error happened in the clusterrpc implementation (500)
	RPCResponse_STATUS_SERVER_ERROR RPCResponse_Status = 5
	// The requested timeout has been expired
	RPCResponse_STATUS_TIMEOUT RPCResponse_Status = 6
	// The server is overloaded (503)
	RPCResponse_STATUS_OVERLOADED_RETRY RPCResponse_Status = 7
	// We couldn't even send the request (PB serialization error, ...)
	RPCResponse_STATUS_CLIENT_REQUEST_ERROR RPCResponse_Status = 9
	// We couldn't send the request because of network/socket issues.
	RPCResponse_STATUS_CLIENT_NETWORK_ERROR RPCResponse_Status = 10
	// Client function called in a wrong way (e.g. different lengt of raddrs
	// and rports slices to NewClientRR())
	RPCResponse_STATUS_CLIENT_CALLED_WRONG RPCResponse_Status = 11
	// Timeout somewhere in the call stack
	RPCResponse_STATUS_MISSED_DEADLINE RPCResponse_Status = 12
	// Loadshedding mode, not accepting requests right now
	RPCResponse_STATUS_LOADSHED RPCResponse_Status = 13
	// Health check failed
	RPCResponse_STATUS_UNHEALTHY RPCResponse_Status = 14
)

var RPCResponse_Status_name = map[int32]string{
	0:  "STATUS_UNKNOWN",
	1:  "STATUS_OK",
	2:  "STATUS_NOT_FOUND",
	4:  "STATUS_NOT_OK",
	5:  "STATUS_SERVER_ERROR",
	6:  "STATUS_TIMEOUT",
	7:  "STATUS_OVERLOADED_RETRY",
	9:  "STATUS_CLIENT_REQUEST_ERROR",
	10: "STATUS_CLIENT_NETWORK_ERROR",
	11: "STATUS_CLIENT_CALLED_WRONG",
	12: "STATUS_MISSED_DEADLINE",
	13: "STATUS_LOADSHED",
	14: "STATUS_UNHEALTHY",
}

var RPCResponse_Status_value = map[string]int32{
	"STATUS_UNKNOWN":              0,
	"STATUS_OK":                   1,
	"STATUS_NOT_FOUND":            2,
	"STATUS_NOT_OK":               4,
	"STATUS_SERVER_ERROR":         5,
	"STATUS_TIMEOUT":              6,
	"STATUS_OVERLOADED_RETRY":     7,
	"STATUS_CLIENT_REQUEST_ERROR": 9,
	"STATUS_CLIENT_NETWORK_ERROR": 10,
	"STATUS_CLIENT_CALLED_WRONG":  11,
	"STATUS_MISSED_DEADLINE":      12,
	"STATUS_LOADSHED":             13,
	"STATUS_UNHEALTHY":            14,
}

func (x RPCResponse_Status) Enum() *RPCResponse_Status {
	p := new(RPCResponse_Status)
	*p = x
	return p
}

func (x RPCResponse_Status) String() string {
	return proto.EnumName(RPCResponse_Status_name, int32(x))
}

func (x *RPCResponse_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RPCResponse_Status_value, data, "RPCResponse_Status")
	if err != nil {
		return err
	}
	*x = RPCResponse_Status(value)
	return nil
}

func (RPCResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d74a5129edc93dca, []int{2, 0}
}

type TraceInfo struct {
	ReceivedTime         *int64       `protobuf:"varint,1,req,name=received_time,json=receivedTime" json:"received_time,omitempty"`
	RepliedTime          *int64       `protobuf:"varint,2,req,name=replied_time,json=repliedTime" json:"replied_time,omitempty"`
	MachineName          *string      `protobuf:"bytes,3,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	EndpointName         *string      `protobuf:"bytes,4,opt,name=endpoint_name,json=endpointName" json:"endpoint_name,omitempty"`
	ErrorMessage         *string      `protobuf:"bytes,5,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Redirect             *string      `protobuf:"bytes,6,opt,name=redirect" json:"redirect,omitempty"`
	ChildCalls           []*TraceInfo `protobuf:"bytes,7,rep,name=child_calls,json=childCalls" json:"child_calls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TraceInfo) Reset()         { *m = TraceInfo{} }
func (m *TraceInfo) String() string { return proto.CompactTextString(m) }
func (*TraceInfo) ProtoMessage()    {}
func (*TraceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5129edc93dca, []int{0}
}
func (m *TraceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceInfo.Merge(m, src)
}
func (m *TraceInfo) XXX_Size() int {
	return m.Size()
}
func (m *TraceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TraceInfo proto.InternalMessageInfo

func (m *TraceInfo) GetReceivedTime() int64 {
	if m != nil && m.ReceivedTime != nil {
		return *m.ReceivedTime
	}
	return 0
}

func (m *TraceInfo) GetRepliedTime() int64 {
	if m != nil && m.RepliedTime != nil {
		return *m.RepliedTime
	}
	return 0
}

func (m *TraceInfo) GetMachineName() string {
	if m != nil && m.MachineName != nil {
		return *m.MachineName
	}
	return ""
}

func (m *TraceInfo) GetEndpointName() string {
	if m != nil && m.EndpointName != nil {
		return *m.EndpointName
	}
	return ""
}

func (m *TraceInfo) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *TraceInfo) GetRedirect() string {
	if m != nil && m.Redirect != nil {
		return *m.Redirect
	}
	return ""
}

func (m *TraceInfo) GetChildCalls() []*TraceInfo {
	if m != nil {
		return m.ChildCalls
	}
	return nil
}

type RPCRequest struct {
	// A unique-ish ID for this RPC
	RpcId     *string `protobuf:"bytes,1,opt,name=rpc_id,json=rpcId" json:"rpc_id,omitempty"`
	Srvc      *string `protobuf:"bytes,2,req,name=srvc" json:"srvc,omitempty"`
	Procedure *string `protobuf:"bytes,3,req,name=procedure" json:"procedure,omitempty"`
	Data      []byte  `protobuf:"bytes,4,req,name=data" json:"data,omitempty"`
	Deadline  *int64  `protobuf:"varint,5,opt,name=deadline" json:"deadline,omitempty"`
	// (i.e. the server doesn't need to bother sending one)
	CallerId             *string  `protobuf:"bytes,6,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	WantTrace            *bool    `protobuf:"varint,7,opt,name=want_trace,json=wantTrace" json:"want_trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCRequest) Reset()         { *m = RPCRequest{} }
func (m *RPCRequest) String() string { return proto.CompactTextString(m) }
func (*RPCRequest) ProtoMessage()    {}
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5129edc93dca, []int{1}
}
func (m *RPCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRequest.Merge(m, src)
}
func (m *RPCRequest) XXX_Size() int {
	return m.Size()
}
func (m *RPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRequest proto.InternalMessageInfo

func (m *RPCRequest) GetRpcId() string {
	if m != nil && m.RpcId != nil {
		return *m.RpcId
	}
	return ""
}

func (m *RPCRequest) GetSrvc() string {
	if m != nil && m.Srvc != nil {
		return *m.Srvc
	}
	return ""
}

func (m *RPCRequest) GetProcedure() string {
	if m != nil && m.Procedure != nil {
		return *m.Procedure
	}
	return ""
}

func (m *RPCRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RPCRequest) GetDeadline() int64 {
	if m != nil && m.Deadline != nil {
		return *m.Deadline
	}
	return 0
}

func (m *RPCRequest) GetCallerId() string {
	if m != nil && m.CallerId != nil {
		return *m.CallerId
	}
	return ""
}

func (m *RPCRequest) GetWantTrace() bool {
	if m != nil && m.WantTrace != nil {
		return *m.WantTrace
	}
	return false
}

type RPCResponse struct {
	RpcId                *string             `protobuf:"bytes,1,opt,name=rpc_id,json=rpcId" json:"rpc_id,omitempty"`
	ResponseData         []byte              `protobuf:"bytes,2,opt,name=response_data,json=responseData" json:"response_data,omitempty"`
	ResponseStatus       *RPCResponse_Status `protobuf:"varint,3,req,name=response_status,json=responseStatus,enum=proto.RPCResponse_Status" json:"response_status,omitempty"`
	ErrorMessage         *string             `protobuf:"bytes,4,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Traceinfo            *TraceInfo          `protobuf:"bytes,5,opt,name=traceinfo" json:"traceinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RPCResponse) Reset()         { *m = RPCResponse{} }
func (m *RPCResponse) String() string { return proto.CompactTextString(m) }
func (*RPCResponse) ProtoMessage()    {}
func (*RPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5129edc93dca, []int{2}
}
func (m *RPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCResponse.Merge(m, src)
}
func (m *RPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *RPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCResponse proto.InternalMessageInfo

func (m *RPCResponse) GetRpcId() string {
	if m != nil && m.RpcId != nil {
		return *m.RpcId
	}
	return ""
}

func (m *RPCResponse) GetResponseData() []byte {
	if m != nil {
		return m.ResponseData
	}
	return nil
}

func (m *RPCResponse) GetResponseStatus() RPCResponse_Status {
	if m != nil && m.ResponseStatus != nil {
		return *m.ResponseStatus
	}
	return RPCResponse_STATUS_UNKNOWN
}

func (m *RPCResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *RPCResponse) GetTraceinfo() *TraceInfo {
	if m != nil {
		return m.Traceinfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.RPCResponse_Status", RPCResponse_Status_name, RPCResponse_Status_value)
	proto.RegisterType((*TraceInfo)(nil), "proto.TraceInfo")
	proto.RegisterType((*RPCRequest)(nil), "proto.RPCRequest")
	proto.RegisterType((*RPCResponse)(nil), "proto.RPCResponse")
}

func init() { proto.RegisterFile("proto/rpc.proto", fileDescriptor_d74a5129edc93dca) }

var fileDescriptor_d74a5129edc93dca = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x72, 0xd3, 0x4a,
	0x10, 0xc6, 0x9f, 0xe4, 0x3f, 0x89, 0xda, 0xb2, 0xa3, 0x37, 0x79, 0x8f, 0x88, 0x04, 0x8c, 0x31,
	0x1b, 0xaf, 0x4c, 0x91, 0x1b, 0x38, 0xd6, 0x40, 0x54, 0x76, 0x24, 0x18, 0xc9, 0x49, 0x65, 0x35,
	0xa5, 0x92, 0x26, 0x44, 0x55, 0xb6, 0x24, 0x46, 0x4a, 0x38, 0x06, 0x17, 0xe1, 0x12, 0xac, 0x60,
	0xc9, 0x11, 0xa8, 0x9c, 0x84, 0x9a, 0xd1, 0xd8, 0x31, 0x95, 0xb0, 0xd2, 0xf4, 0xd7, 0x3f, 0x75,
	0xf7, 0xd7, 0x0d, 0x7b, 0x05, 0xcf, 0xab, 0xfc, 0x35, 0x2f, 0xe2, 0xb1, 0x7c, 0xa1, 0x96, 0xfc,
	0x0c, 0xbf, 0xe8, 0x60, 0x84, 0x3c, 0x8a, 0x99, 0x9b, 0x5d, 0xe5, 0xe8, 0x15, 0x74, 0x39, 0x8b,
	0x59, 0x7a, 0xcb, 0x12, 0x5a, 0xa5, 0x2b, 0x66, 0x6b, 0x03, 0x7d, 0xd4, 0x20, 0xe6, 0x5a, 0x0c,
	0xd3, 0x15, 0x43, 0x2f, 0xc1, 0xe4, 0xac, 0x58, 0xa6, 0x6b, 0x46, 0x97, 0x4c, 0x47, 0x69, 0x6b,
	0x64, 0x15, 0xc5, 0xd7, 0x69, 0xc6, 0x68, 0x16, 0xad, 0x98, 0xdd, 0x18, 0x68, 0x23, 0x83, 0x74,
	0x94, 0xe6, 0x45, 0x2b, 0x26, 0x5a, 0xb1, 0x2c, 0x29, 0xf2, 0x34, 0xab, 0x6a, 0xa6, 0x29, 0x19,
	0x73, 0x2d, 0x6e, 0x20, 0xce, 0x73, 0x4e, 0x57, 0xac, 0x2c, 0xa3, 0x8f, 0xcc, 0x6e, 0x29, 0x48,
	0x88, 0x67, 0xb5, 0x86, 0x0e, 0x61, 0x97, 0xb3, 0x24, 0xe5, 0x2c, 0xae, 0xec, 0xb6, 0xcc, 0x6f,
	0x62, 0xf4, 0x06, 0x3a, 0xf1, 0x75, 0xba, 0x4c, 0x68, 0x1c, 0x2d, 0x97, 0xa5, 0xbd, 0x33, 0x68,
	0x8c, 0x3a, 0xc7, 0x56, 0xbd, 0x82, 0xf1, 0xc6, 0x37, 0x01, 0x09, 0x4d, 0x05, 0x33, 0xfc, 0xa6,
	0x01, 0x90, 0xf7, 0x53, 0xc2, 0x3e, 0xdd, 0xb0, 0xb2, 0x42, 0xff, 0x43, 0x9b, 0x17, 0x31, 0x4d,
	0x13, 0x5b, 0x93, 0xb5, 0x5b, 0xbc, 0x88, 0xdd, 0x04, 0x21, 0x68, 0x96, 0xfc, 0x36, 0x96, 0xe6,
	0x0d, 0x22, 0xdf, 0xe8, 0x19, 0x18, 0x05, 0xcf, 0x63, 0x96, 0xdc, 0x70, 0x61, 0x59, 0x24, 0xee,
	0x05, 0xf1, 0x47, 0x12, 0x55, 0x91, 0xdd, 0x1c, 0xe8, 0x23, 0x93, 0xc8, 0xb7, 0x18, 0x3d, 0x61,
	0x51, 0xb2, 0x4c, 0xb3, 0xda, 0x5a, 0x83, 0x6c, 0x62, 0x74, 0x04, 0x86, 0x18, 0x9a, 0x71, 0xd1,
	0x5b, 0xf9, 0xaa, 0x05, 0x37, 0x41, 0xcf, 0x01, 0x3e, 0x47, 0x59, 0x45, 0x2b, 0x61, 0xc1, 0xde,
	0x19, 0x68, 0xa3, 0x5d, 0x62, 0x08, 0x45, 0x7a, 0x1a, 0x7e, 0x6d, 0x42, 0x47, 0x7a, 0x28, 0x8b,
	0x3c, 0x2b, 0xd9, 0xdf, 0x4c, 0xc8, 0x73, 0xd7, 0x08, 0x95, 0xb3, 0xe9, 0x03, 0x6d, 0x64, 0x8a,
	0x73, 0xd7, 0xa2, 0x23, 0x66, 0x3c, 0x81, 0xbd, 0x0d, 0x54, 0x56, 0x51, 0x75, 0x53, 0x4a, 0x6f,
	0xbd, 0xe3, 0xa7, 0x6a, 0x8d, 0x5b, 0x8d, 0xc6, 0x81, 0x04, 0x48, 0x6f, 0xfd, 0x47, 0x1d, 0x3f,
	0xbc, 0x63, 0xf3, 0x91, 0x3b, 0x8e, 0xc1, 0x90, 0x76, 0xd2, 0xec, 0x2a, 0x97, 0xdb, 0x78, 0xec,
	0x52, 0xf7, 0xc8, 0xf0, 0xbb, 0x0e, 0x6d, 0x55, 0x1f, 0x41, 0x2f, 0x08, 0x27, 0xe1, 0x22, 0xa0,
	0x0b, 0x6f, 0xe6, 0xf9, 0x17, 0x9e, 0xf5, 0x0f, 0xea, 0x82, 0xa1, 0x34, 0x7f, 0x66, 0x69, 0xe8,
	0x3f, 0xb0, 0x54, 0xe8, 0xf9, 0x21, 0x7d, 0xeb, 0x2f, 0x3c, 0xc7, 0xd2, 0xd1, 0xbf, 0xd0, 0xdd,
	0x52, 0xfd, 0x99, 0xd5, 0x44, 0x07, 0xb0, 0xaf, 0xa4, 0x00, 0x93, 0x73, 0x4c, 0x28, 0x26, 0xc4,
	0x27, 0x56, 0x6b, 0xab, 0x49, 0xe8, 0x9e, 0x61, 0x7f, 0x11, 0x5a, 0x6d, 0x74, 0x04, 0x07, 0xeb,
	0x26, 0xe7, 0x98, 0xcc, 0xfd, 0x89, 0x83, 0x1d, 0x4a, 0x70, 0x48, 0x2e, 0xad, 0x1d, 0xf4, 0x02,
	0x8e, 0x54, 0x72, 0x3a, 0x77, 0xb1, 0x17, 0x52, 0x82, 0x3f, 0x2c, 0x70, 0x10, 0xaa, 0x8a, 0xc6,
	0x43, 0xc0, 0xc3, 0xe1, 0x85, 0x4f, 0x66, 0x0a, 0x00, 0xd4, 0x87, 0xc3, 0x3f, 0x81, 0xe9, 0x64,
	0x3e, 0xc7, 0x0e, 0xbd, 0x20, 0xbe, 0xf7, 0xce, 0xea, 0xa0, 0x43, 0x78, 0xa2, 0xf2, 0x67, 0x6e,
	0x10, 0x60, 0x87, 0x3a, 0x78, 0xe2, 0xcc, 0x5d, 0x0f, 0x5b, 0x26, 0xda, 0x87, 0x3d, 0x95, 0x13,
	0x63, 0x05, 0xa7, 0xd8, 0xb1, 0xba, 0x5b, 0x5b, 0x58, 0x78, 0xa7, 0x78, 0x32, 0x0f, 0x4f, 0x2f,
	0xad, 0xde, 0x89, 0xf9, 0xe3, 0xae, 0xaf, 0xfd, 0xbc, 0xeb, 0x6b, 0xbf, 0xee, 0xfa, 0xda, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xf7, 0x85, 0xb7, 0x2b, 0x04, 0x00, 0x00,
}

func (m *TraceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReceivedTime == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("received_time")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(*m.ReceivedTime))
	}
	if m.RepliedTime == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("replied_time")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRpc(dAtA, i, uint64(*m.RepliedTime))
	}
	if m.MachineName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.MachineName)))
		i += copy(dAtA[i:], *m.MachineName)
	}
	if m.EndpointName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.EndpointName)))
		i += copy(dAtA[i:], *m.EndpointName)
	}
	if m.ErrorMessage != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.ErrorMessage)))
		i += copy(dAtA[i:], *m.ErrorMessage)
	}
	if m.Redirect != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.Redirect)))
		i += copy(dAtA[i:], *m.Redirect)
	}
	if len(m.ChildCalls) > 0 {
		for _, msg := range m.ChildCalls {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RpcId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.RpcId)))
		i += copy(dAtA[i:], *m.RpcId)
	}
	if m.Srvc == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("srvc")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.Srvc)))
		i += copy(dAtA[i:], *m.Srvc)
	}
	if m.Procedure == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("procedure")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.Procedure)))
		i += copy(dAtA[i:], *m.Procedure)
	}
	if m.Data == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("data")
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Deadline != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRpc(dAtA, i, uint64(*m.Deadline))
	}
	if m.CallerId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.CallerId)))
		i += copy(dAtA[i:], *m.CallerId)
	}
	if m.WantTrace != nil {
		dAtA[i] = 0x38
		i++
		if *m.WantTrace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RpcId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.RpcId)))
		i += copy(dAtA[i:], *m.RpcId)
	}
	if m.ResponseData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ResponseData)))
		i += copy(dAtA[i:], m.ResponseData)
	}
	if m.ResponseStatus == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("response_status")
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRpc(dAtA, i, uint64(*m.ResponseStatus))
	}
	if m.ErrorMessage != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(*m.ErrorMessage)))
		i += copy(dAtA[i:], *m.ErrorMessage)
	}
	if m.Traceinfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Traceinfo.Size()))
		n1, err1 := m.Traceinfo.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TraceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceivedTime != nil {
		n += 1 + sovRpc(uint64(*m.ReceivedTime))
	}
	if m.RepliedTime != nil {
		n += 1 + sovRpc(uint64(*m.RepliedTime))
	}
	if m.MachineName != nil {
		l = len(*m.MachineName)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.EndpointName != nil {
		l = len(*m.EndpointName)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ErrorMessage != nil {
		l = len(*m.ErrorMessage)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Redirect != nil {
		l = len(*m.Redirect)
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.ChildCalls) > 0 {
		for _, e := range m.ChildCalls {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RPCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RpcId != nil {
		l = len(*m.RpcId)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Srvc != nil {
		l = len(*m.Srvc)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Procedure != nil {
		l = len(*m.Procedure)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Deadline != nil {
		n += 1 + sovRpc(uint64(*m.Deadline))
	}
	if m.CallerId != nil {
		l = len(*m.CallerId)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.WantTrace != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RpcId != nil {
		l = len(*m.RpcId)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ResponseData != nil {
		l = len(m.ResponseData)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ResponseStatus != nil {
		n += 1 + sovRpc(uint64(*m.ResponseStatus))
	}
	if m.ErrorMessage != nil {
		l = len(*m.ErrorMessage)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Traceinfo != nil {
		l = m.Traceinfo.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TraceInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceivedTime = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepliedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RepliedTime = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MachineName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EndpointName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMessage = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Redirect = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildCalls = append(m.ChildCalls, &TraceInfo{})
			if err := m.ChildCalls[len(m.ChildCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("received_time")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("replied_time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RpcId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srvc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Srvc = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Procedure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Procedure = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deadline = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CallerId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantTrace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WantTrace = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("srvc")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("procedure")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RpcId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseData = append(m.ResponseData[:0], dAtA[iNdEx:postIndex]...)
			if m.ResponseData == nil {
				m.ResponseData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseStatus", wireType)
			}
			var v RPCResponse_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RPCResponse_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResponseStatus = &v
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMessage = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traceinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Traceinfo == nil {
				m.Traceinfo = &TraceInfo{}
			}
			if err := m.Traceinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("response_status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRpc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)
